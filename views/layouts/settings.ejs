<!DOCTYPE html>
<html lang="en">
   <head>
      <!-- Required meta tags -->
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
      <meta content="text/html; charset=UTF-8; X-Content-Type-Options=nosniff" http-equiv="Content-Type" />

      <!-- Bootstrap CSS -->
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" />
      <!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> -->
      <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />

      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.css" />
      <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css" />
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css">

      <script src="/plugins/notification.js" charset="utf-8"></script>
      <script src="/assets/js/common.js" charset="utf-8"></script>
      <title>Dashboard-Mentor</title>
   </head>

   <body style="overflow-x: hidden">
      <%- include('../partials/navBar.ejs') %>
<div class="m-3">
   <nav>
      <div class="nav nav-tabs" id="nav-tab" role="tablist">
        <button class="nav-link active" id="nav-home-tab" data-toggle="tab" data-target="#nav-configuration" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Configuration Hub</button>
        <button class="nav-link" id="nav-profile-tab" data-toggle="tab" data-target="#nav-users" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Users</button>
        <button class="nav-link" id="nav-profile-tab" data-toggle="tab" data-target="#nav-events" type="button" role="tab" aria-controls="nav-profile" aria-selected="false" >Events</button>
      </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
      <div class="tab-pane fade show active" id="nav-configuration" role="tabpanel" aria-labelledby="nav-home-tab">   <%- include ('../../views/partials/configuration.ejs') %></div>
      <div class="tab-pane fade" id="nav-users" role="tabpanel" aria-labelledby="nav-profile-tab"> <%- include ('../../views/partials/users.ejs') %></div>
      <div class="tab-pane fade" id="nav-events" role="tabpanel" aria-labelledby="nav-profile-tab"> <%- include ('../../views/partials/events.ejs') %></div>
    </div>
 
      <style>
         .line {
  flex-grow: 1;
  border-top: 1px solid #000;
  margin: 0 10px; /* Add margin for spacing between the line and text */
}
         /* Width of the scrollbar */
         ::-webkit-scrollbar {
            width: 6px; /* Adjusted width */
         }

         /* Handle on hover */
         ::-webkit-scrollbar-thumb:hover {
            background: #555;
         }

         /* Handle on active */
         ::-webkit-scrollbar-thumb:active {
            background: #777;
         }

         /* Track */
         ::-webkit-scrollbar-track {
            background: #f1f1f1;
         }

         /* Handle */
         ::-webkit-scrollbar-thumb {
            background: #888;
         }

         .card-rounded {
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
         }
         .edit-icon:hover {
            filter: invert(17%) sepia(54%) saturate(802%) hue-rotate(189deg) brightness(96%) contrast(88%);
         }
         .delete-icon:hover {
            filter: invert(43%) sepia(53%) saturate(3576%) hue-rotate(328deg) brightness(93%) contrast(95%);
         }
         .add-icon:hover {
            filter: invert(16%) sepia(70%) saturate(7301%) hue-rotate(268deg) brightness(84%) contrast(83%);
         }
      </style>
      <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
      <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

      <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
      <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
      <script type="text/javascript" src="https://formbuilder.online/assets/js/form-builder.min.js"></script>
      <script type="text/javascript" src="../assets/js/form-render.min.js"></script>
   </body>

   <script>
      $(document).ready(function () {

      const allNavItems = document.querySelectorAll('.navbar-nav .nav-item');
      allNavItems.forEach(function(item) {
        item.classList.remove('active');
      });
      const activeNavItem = document.getElementById('settings-nav-item');
      if (activeNavItem) {
        activeNavItem.classList.add('active');
      }

         $.noConflict();
      })
      let selectedDomainID;
      let selectedTeamID;
      let selectedGroupID;
      const editDomain = (id) => {
         // $.noConflict();
         $("#edit-domain-modal").modal("show");
         selectedDomainID = id;
         fetch(`/api/domain?id=${id}`, {
            method: "GET",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               const domain = response.data.value;
               if (response.error) return demo.shwNotification("left", "bottom", "Something went wrong! Please add again!");
               document.getElementById("domain").value = domain;
               return;
            });
      };
      const editForm = (id) => {
         // $.noConflict();
         $("#edit-form-modal").modal("show");
         selectedDomainID = id;
         fetch(`/api/form/${id}`, {
            method: "GET",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               const formDetails = response.data;
               if (response.error) return demo.shwNotification("left", "bottom", "Something went wrong! Please edit again!");
               document.getElementById("form-edit-name").value = formDetails.name;
               jQuery(($x) => {
                  document.getElementById("form-editor").innerHTML = "";
                  const fbTemplate = document.getElementById("form-editor");
                  const formBuilder = $x(fbTemplate).formBuilder({ ...fbOptions, formData: response.data.value });

                  document.getElementById("save-edited-form").addEventListener("click", function () {
                     const formData = {};
                     formData.name = document.getElementById("form-edit-name").value;
                     formData.value = formBuilder.actions.getData("json");
                     if (!formData.name || formData.name == "") {
                        // $.noConflict();
                        return demo.showNotification("bottom", "bottom", "Please Enter Name", 4);
                     }
                     if (!formData.value || formData.value == "[]") {
                        // $.noConflict();
                        return demo.showNotification("bottom", "bottom", "Please Add Controls", 4);
                     }
                     fetch(`/api/form/${id}`, {
                        method: "PUT",
                        headers: {
                           "Content-Type": "application/json",
                           Authorization: `Bearer ${sessionStorage.getItem('token')}`
                        },
                        body: JSON.stringify(formData),
                     })
                        .then((response) => response.json())
                        .then((data) => {
                           if (data.error) {
                              demo.showNotification("bottom", "bottom", data.message);
                           } else {
                              demo.showNotification("bottom", "bottom", "Form Updated Successfully");
                              // $.noConflict();
                              $("#edit-form-modal").modal("hide");
                              location.reload();
                           }
                        });
                  });
               });
               return;
            });
      };
      const saveDomain = () => {
         const domain = document.getElementById("domain").value;
         fetch(`/api/domain/${selectedDomainID}`, {
            method: "PUT",
            headers: {
               "Content-Type": "application/json",
               Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
            body: JSON.stringify({
               domain,
            }),
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on update!") : demo.showNotification("left", "bottom", "Domain updateed");
               $("#edit-domain-modal").modal("hide");
               location.reload();
               return;
            });
      };
      const addDomain = () => {
         const domain = document.getElementById("input-domain").value;
         fetch(`/api/domain/`, {
            method: "POST",
            headers: {
               "Content-Type": "application/json",
               Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
            body: JSON.stringify({
               domain,
            }),
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on adding domain!") : demo.showNotification("left", "bottom", "Domain added");
               // $.noConflict();
               $("#add-domain-modal").modal("hide");
               location.reload();
               return;
            });
      };

      const deleteDomain = (id) => {
         fetch(`/api/domain/${id}`, {
            method: "PATCH",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on delete!") : demo.showNotification("left", "bottom", "Domain deleted successfully");
               location.reload();
               return;
            });
      };
      const deleteForm = (id) => {
         fetch(`/api/form/${id}`, {
            method: "PATCH",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on delete!") : demo.showNotification("left", "bottom", "Form deleted successfully");
               location.reload();
               return;
            });
      };

      const fields = [
         {
            label: "DateTime",
            type: "text",
            subtype: "datetime-local",
            icon: "⏰", //html emoji
         },
      ];
      const fbOptions = {
         fields: fields,
         subtypes: {
            text: ["datetime-local"],
         },
         disabledAttrs: ["access", "className", "description", "inline", "name", "other", "step", "style", "toggle"],
         disabledActionButtons: ["data", "clear", "save"],
         disableFields: ["autocomplete", "button", "file", "header", "hidden"],
      };
      const initialiseForms = (id) => {
         jQuery(function ($x) {
            document.getElementById("form-creator").innerHTML = "";
            const fbTemplate = document.getElementById("form-creator");
            const formBuilder = $x(fbTemplate).formBuilder(fbOptions);
            const data = formBuilder.actions.getData("json");
            document.getElementById("save-form").addEventListener("click", function () {
               const formData = {};
               formData.name = document.getElementById("form-name").value;
               formData.value = formBuilder.actions.getData("json");

               fetch(`/api/form/`, {
                  method: "POST",
                  headers: {
                     "Content-Type": "application/json",
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
                  },
                  body: JSON.stringify({
                     formData,
                  }),
               })
                  .then((response) => response.json())
                  .then((response) => {
                     response.error ? demo.showNotification("left", "bottom", "Something went wrong on adding form!") : demo.showNotification("left", "bottom", "Form added");
                     // $.noConflict();
                     $("#add-form-modal").modal("hide");
                     location.reload();
                     return;
                  });
               // const fbRender = $('.fb-render').formRender({
               //                 formData: formBuilder.actions.getData('json')
               //             });
               // if (!formData.name || formData.name == '') {
               //     return demo.showNotification('bottom', 'bottom', "Please Enter Name", 4);
               // }
               // if (!formData.input_fields || formData.input_fields == '[]') {
               //     return demo.showNotification('bottom', 'bottom', "Please Add Controls", 4);
               // }
               // if (JSON.parse(formData.input_fields).length > 10) {
               //     return demo.showNotification('bottom', 'bottom', "Maximum field limit exceeded. Only 10 fields are allowed", 4);
               // }
            });
         });
      };
      
      // Groups

      document.getElementById("search-group").addEventListener("input", function() {
        const searchValue = this.value.toLowerCase();
        const checkboxes = document.querySelectorAll(".form-check");

        checkboxes.forEach(function(checkbox) {
            const label = checkbox.querySelector(".form-check-label");
            const labelText = label.textContent.toLowerCase();
            if (labelText.includes(searchValue)) {
                checkbox.style.display = "block";
            } else {
                checkbox.style.display = "none";
            }
        });
    });
      document.getElementById("search-mentee").addEventListener("input", function() {
        const searchValue = this.value.toLowerCase();
        const checkboxes = document.querySelectorAll(".form-check");

        checkboxes.forEach(function(checkbox) {
            const label = checkbox.querySelector(".form-check-label");
            const labelText = label.textContent.toLowerCase();
            if (labelText.includes(searchValue)) {
                checkbox.style.display = "block";
            } else {
                checkbox.style.display = "none";
            }
        });
    });

    const addGroup = ()=>{
      const groupName = document.getElementById("input-group").value
      const hasDomainGroup = document.getElementById("domain-group").checked
       let checkedAgentIDList = [];
       const checkboxes = document.querySelectorAll(".form-check-input:checked");
       checkboxes.forEach(function(checkbox) {
           checkedAgentIDList.push(checkbox.value);
       });
       if((checkedAgentIDList.length==0 || groupName == "") && !hasDomainGroup )
       demo.showNotification("left", "bottom", "Add a atleast one member to the group");
       fetch(`/api/groups?hasDomainGroup=${hasDomainGroup}`, {
                  method: "POST",
                  headers: {
                     "Content-Type": "application/json",
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
                  },
                  body: JSON.stringify({
                     checkedAgentIDList,
                     groupName
                  }),
               })
                  .then((response) => response.json())
                  .then((response) => {
                     response.error ? demo.showNotification("left", "bottom", "Something went wrong on adding group !") : demo.showNotification("left", "bottom", "Group added");
                     $("#add-groups-modal").modal("hide");
                     // location.reload();
                     return;
                  });
    }
    const addTeam = ()=>{
      const teamName = document.getElementById("input-team").value
       let checkedUserIDList = [];
       const checkboxes = document.querySelectorAll(".form-check-input:checked");
       checkboxes.forEach(function(checkbox) {
           checkedUserIDList.push(checkbox.value);
       });
       if((checkedUserIDList.length==0 || teamName == ""))
       return demo.showNotification("left", "bottom", "Add a atleast one member to the group");
       fetch(`/api/team`, {
                  method: "POST",
                  headers: {
                     "Content-Type": "application/json",
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
                  },
                  body: JSON.stringify({
                     checkedUserIDList,
                     teamName
                  }),
               })
                  .then((response) => response.json())
                  .then((response) => {
                     response.error ? demo.showNotification("left", "bottom", "Something went wrong on adding group !") : demo.showNotification("left", "bottom", "Group added");
                     $("#add-team-modal").modal("hide");
                     location.reload();
                     return;
                  });
    }
   
   
   const editTeam = (id)=>{
      $("#edit-team-modal").modal("show");
      selectedTeamID = id
      fetch(`/api/team?id=${id}`, {
            method: "GET",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               const teamName = response.data.name;
               if (response.error) return demo.shwNotification("left", "bottom", "Something went wrong! Please add again!");
               document.getElementById("input-team-name-edit").value = teamName;
               if(response.data.user_list){
                  parsedTeamData = JSON.parse(response.data.user_list) 
                  for(const id of parsedTeamData) {
                     const checkbox = document.getElementById(`team-edit-${id}`);
                      if(checkbox) {
                          checkbox.checked = true;
                      }
                  }
               }
               return;
            });
   }
   
   const saveTeam = () => {
      const teamName = document.getElementById("input-team-name-edit").value
       let checkedUserIDListOnEdit = [];
       const checkboxes = document.querySelectorAll(".team-edit:checked");
       checkboxes.forEach(function(checkbox) {
           checkedUserIDListOnEdit.push(checkbox.value);
       });
       if(teamName == "")
       return demo.showNotification("left", "bottom", "Add a Team Name");
         fetch(`/api/team/${selectedTeamID}`, {
            method: "PUT",
            headers: {
               "Content-Type": "application/json",
               Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
            body: JSON.stringify({
               checkedUserIDListOnEdit,
               teamName
            }),
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on update!") : demo.showNotification("left", "bottom", "Team updateed");
               $("#edit-team-modal").modal("hide");
               location.reload();
               return;
            });
      };

      const deleteTeam = (id) => {
         fetch(`/api/team/${id}`, {
            method: "PATCH",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on delete!") : demo.showNotification("left", "bottom", "Team deleted successfully");
               location.reload();
               return;
            });
      };
   
   
      const editGroup = (id)=>{
      $("#edit-group-modal").modal("show");
      selectedGroupID = id
      fetch(`/api/group?id=${id}`, {
            method: "GET",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               const groupName = response.data.name;
               if (response.error) return demo.shwNotification("left", "bottom", "Something went wrong! Please add again!");
               document.getElementById("input-group-name-edit").value = groupName;
               if(response.data.user_list){
                  parsedTeamData = JSON.parse(response.data.user_list) 
                  for(const id of parsedTeamData) {
                     const checkbox = document.getElementById(`group-edit-${id}`);
                      if(checkbox) {
                          checkbox.checked = true;
                      }
                  }
               }
               return;
            });
   }

   const saveGroup = () => {
      const groupName = document.getElementById("input-group-name-edit").value
       let checkedUserIDListOnEdit = [];
       const checkboxes = document.querySelectorAll(".group-edit:checked");
       checkboxes.forEach(function(checkbox) {
           checkedUserIDListOnEdit.push(checkbox.value);
       });
       if(groupName == "")
       return demo.showNotification("left", "bottom", "Add a Group Name");
         fetch(`/api/group/${selectedGroupID}`, {
            method: "PUT",
            headers: {
               "Content-Type": "application/json",
               Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
            body: JSON.stringify({
               checkedUserIDListOnEdit,
               groupName
            }),
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on update!") : demo.showNotification("left", "bottom", "Team updateed");
               $("#edit-group-modal").modal("hide");
               location.reload();
               return;
            });
      };

      const deleteGroup = (id) => {
         fetch(`/api/group/${id}`, {
            method: "PATCH",
            headers:{
                     Authorization: `Bearer ${sessionStorage.getItem('token')}`
            },
         })
            .then((response) => response.json())
            .then((response) => {
               response.error ? demo.showNotification("left", "bottom", "Something went wrong on delete!") : demo.showNotification("left", "bottom", "Group deleted successfully");
               location.reload();
               return;
            });
      };
   </script>
</html>
